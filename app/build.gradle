/*
 * Copyright 2017 Martin Chamarro (@martinchamarro)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: 'tests.gradle'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "com.martinchamarro.muvis"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            // Default config
        }
        release {
            // Default config
        }
    }

    buildTypes {

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug-build' + getDate()
            debuggable true
            buildConfigField "boolean", "DEBUG_MODE", "true"
            buildConfigField "String", "TMD_API_KEY", '"3202eb5aa836427005ced3a158c19d0b"'
            buildConfigField "String", "YOUTUBE_API_KEY", '"AIzaSyA-EvoyslHvgTYiR3Tft9mYoEgD5INnnFE"'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "String", "TMD_API_KEY", '"<<API_KEY>>"'
            buildConfigField "String", "YOUTUBE_API_KEY", '"<<API_KEY>>"'

            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/app_debug.kotlin_module'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies.support
    implementation rootProject.ext.dependencies.design
    implementation rootProject.ext.dependencies.multidex
    implementation rootProject.ext.dependencies.cardView
    implementation rootProject.ext.dependencies.gson
    implementation rootProject.ext.dependencies.dagger
    kapt rootProject.ext.dependencies.daggerCompiler
    implementation rootProject.ext.dependencies.butterKnife
    kapt rootProject.ext.dependencies.butterKnifeCompiler
    implementation rootProject.ext.dependencies.retrofit
    implementation rootProject.ext.dependencies.retrofitGson
    implementation rootProject.ext.dependencies.okhttp3Logging
    implementation rootProject.ext.dependencies.kotlin
    implementation rootProject.ext.dependencies.picasso
    implementation rootProject.ext.dependencies.constraintLayout
    implementation rootProject.ext.dependencies.adjustableImageView
    implementation rootProject.ext.dependencies.lazyStorage
    implementation rootProject.ext.dependencies.anko
    implementation rootProject.ext.dependencies.funktionaleEither

    testImplementation rootProject.ext.testingDependencies.junit
    testImplementation rootProject.ext.testingDependencies.mockitoCore
    testImplementation rootProject.ext.testingDependencies.mockitoKotlin
    androidTestImplementation(rootProject.ext.testingDependencies.espresso) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
