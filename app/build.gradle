/*
 * Copyright 2017 Martin Chamarro (@martinchamarro)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "com.martinchamarro.muvis"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            // Default config
        }
        release {
            // Default config
        }
    }

    buildTypes {

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug-build' + getDate()
            debuggable true
            buildConfigField "boolean", "DEBUG_MODE", "true"
            buildConfigField "String", "API_KEY", '"3202eb5aa836427005ced3a158c19d0b"'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "String", "API_KEY", '"<<API_KEY>>"'
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/app_debug.kotlin_module'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {

    compile rootProject.ext.dependencies.support
    compile rootProject.ext.dependencies.design
    compile rootProject.ext.dependencies.multidex
    compile rootProject.ext.dependencies.cardView
    compile rootProject.ext.dependencies.gson
    compile rootProject.ext.dependencies.dagger
    kapt rootProject.ext.dependencies.daggerCompiler
    compile rootProject.ext.dependencies.butterKnife
    kapt rootProject.ext.dependencies.butterKnifeCompiler
    compile rootProject.ext.dependencies.retrofit
    compile rootProject.ext.dependencies.retrofitGson
    compile rootProject.ext.dependencies.okhttp3Logging
    compile rootProject.ext.dependencies.kotlin
    compile rootProject.ext.dependencies.picasso
    compile rootProject.ext.dependencies.constraintLayout
    compile rootProject.ext.dependencies.adjustableImageView
    compile rootProject.ext.dependencies.lazyStorage
    compile rootProject.ext.dependencies.anko
    compile rootProject.ext.dependencies.funktionaleEither

    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
